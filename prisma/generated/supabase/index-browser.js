
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  website: 'website',
  industry: 'industry',
  size: 'size',
  email: 'email',
  phone: 'phone',
  address: 'address',
  registrationNumber: 'registrationNumber',
  taxId: 'taxId',
  vatNumber: 'vatNumber',
  businessType: 'businessType',
  logo: 'logo',
  primaryColor: 'primaryColor',
  theme: 'theme',
  subscriptionPlan: 'subscriptionPlan',
  subscriptionStatus: 'subscriptionStatus',
  billingEmail: 'billingEmail',
  paymentMethodId: 'paymentMethodId',
  maxUsers: 'maxUsers',
  maxWarehouses: 'maxWarehouses',
  maxProducts: 'maxProducts',
  features: 'features',
  enforceSSO: 'enforceSSO',
  requireTwoFactor: 'requireTwoFactor',
  passwordPolicy: 'passwordPolicy',
  sessionTimeoutMinutes: 'sessionTimeoutMinutes',
  isActive: 'isActive',
  isSuspended: 'isSuspended',
  isDeleted: 'isDeleted',
  trialEndsAt: 'trialEndsAt',
  onboardingStep: 'onboardingStep',
  setupComplete: 'setupComplete',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.CompanyUserScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  userId: 'userId',
  role: 'role',
  title: 'title',
  departmentId: 'departmentId',
  employeeId: 'employeeId',
  startDate: 'startDate',
  endDate: 'endDate',
  permissions: 'permissions',
  isActive: 'isActive',
  isOwner: 'isOwner',
  canInvite: 'canInvite',
  canManageBilling: 'canManageBilling',
  managerId: 'managerId',
  directReports: 'directReports',
  status: 'status',
  invitedBy: 'invitedBy',
  invitedAt: 'invitedAt',
  joinedAt: 'joinedAt',
  lastActiveAt: 'lastActiveAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  description: 'description',
  code: 'code',
  parentId: 'parentId',
  level: 'level',
  headOfDepartment: 'headOfDepartment',
  budget: 'budget',
  costCenter: 'costCenter',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyInviteScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  email: 'email',
  role: 'role',
  invitedById: 'invitedById',
  invitedByName: 'invitedByName',
  message: 'message',
  status: 'status',
  token: 'token',
  expiresAt: 'expiresAt',
  sentAt: 'sentAt',
  acceptedAt: 'acceptedAt',
  declinedAt: 'declinedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyLocationScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  type: 'type',
  address: 'address',
  coordinates: 'coordinates',
  timezone: 'timezone',
  phone: 'phone',
  email: 'email',
  managerName: 'managerName',
  businessHours: 'businessHours',
  isPrimary: 'isPrimary',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyIntegrationScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  type: 'type',
  provider: 'provider',
  config: 'config',
  credentials: 'credentials',
  mappings: 'mappings',
  autoSync: 'autoSync',
  syncInterval: 'syncInterval',
  lastSyncAt: 'lastSyncAt',
  nextSyncAt: 'nextSyncAt',
  status: 'status',
  isActive: 'isActive',
  lastError: 'lastError',
  errorCount: 'errorCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyAuditLogScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  userId: 'userId',
  userEmail: 'userEmail',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  changes: 'changes',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  severity: 'severity',
  timestamp: 'timestamp'
};

exports.Prisma.BillingHistoryScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  amount: 'amount',
  tax: 'tax',
  total: 'total',
  currency: 'currency',
  description: 'description',
  invoiceNumber: 'invoiceNumber',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  paidAt: 'paidAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailVerified: 'emailVerified',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  avatar: 'avatar',
  phone: 'phone',
  password: 'password',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  timezone: 'timezone',
  language: 'language',
  theme: 'theme',
  isActive: 'isActive',
  isVerified: 'isVerified',
  isSuspended: 'isSuspended',
  suspendedReason: 'suspendedReason',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  failedLoginCount: 'failedLoginCount',
  lockedUntil: 'lockedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  color: 'color',
  permissions: 'permissions',
  level: 'level',
  isSystem: 'isSystem',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  refreshToken: 'refreshToken',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  deviceId: 'deviceId',
  deviceType: 'deviceType',
  browser: 'browser',
  location: 'location',
  lastActivity: 'lastActivity',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  isRevoked: 'isRevoked',
  revokedAt: 'revokedAt',
  revokedBy: 'revokedBy',
  createdAt: 'createdAt'
};

exports.Prisma.LoginHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  successful: 'successful',
  failReason: 'failReason',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  deviceType: 'deviceType',
  attemptedAt: 'attemptedAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  isUsed: 'isUsed',
  usedAt: 'usedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.UserInvitationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  roleId: 'roleId',
  token: 'token',
  invitedById: 'invitedById',
  invitedByName: 'invitedByName',
  invitedUserId: 'invitedUserId',
  message: 'message',
  status: 'status',
  expiresAt: 'expiresAt',
  sentAt: 'sentAt',
  acceptedAt: 'acceptedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  category: 'category',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  category: 'category',
  priority: 'priority',
  icon: 'icon',
  color: 'color',
  actionUrl: 'actionUrl',
  actionText: 'actionText',
  isRead: 'isRead',
  readAt: 'readAt',
  channels: 'channels',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userEmail: 'userEmail',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  changes: 'changes',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId',
  metadata: 'metadata',
  severity: 'severity',
  timestamp: 'timestamp'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  category: 'category',
  key: 'key',
  value: 'value',
  description: 'description',
  isPublic: 'isPublic',
  isSystem: 'isSystem',
  dataType: 'dataType',
  validation: 'validation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  keyHash: 'keyHash',
  keyPrefix: 'keyPrefix',
  scopes: 'scopes',
  lastUsedAt: 'lastUsedAt',
  usageCount: 'usageCount',
  rateLimit: 'rateLimit',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  isRevoked: 'isRevoked',
  revokedAt: 'revokedAt',
  revokedBy: 'revokedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.CompanySize = exports.$Enums.CompanySize = {
  STARTUP: 'STARTUP',
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE',
  ENTERPRISE: 'ENTERPRISE'
};

exports.BusinessType = exports.$Enums.BusinessType = {
  PRIVATE: 'PRIVATE',
  PUBLIC: 'PUBLIC',
  NONPROFIT: 'NONPROFIT',
  GOVERNMENT: 'GOVERNMENT',
  PARTNERSHIP: 'PARTNERSHIP',
  SOLE_PROPRIETORSHIP: 'SOLE_PROPRIETORSHIP'
};

exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  FREE: 'FREE',
  BASIC: 'BASIC',
  PROFESSIONAL: 'PROFESSIONAL',
  ENTERPRISE: 'ENTERPRISE',
  CUSTOM: 'CUSTOM'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  TRIAL: 'TRIAL',
  PAST_DUE: 'PAST_DUE',
  CANCELLED: 'CANCELLED',
  SUSPENDED: 'SUSPENDED',
  EXPIRED: 'EXPIRED'
};

exports.CompanyRole = exports.$Enums.CompanyRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  SUPERVISOR: 'SUPERVISOR',
  EMPLOYEE: 'EMPLOYEE',
  CONTRACTOR: 'CONTRACTOR',
  VIEWER: 'VIEWER'
};

exports.EmploymentStatus = exports.$Enums.EmploymentStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  TERMINATED: 'TERMINATED',
  SUSPENDED: 'SUSPENDED',
  ON_LEAVE: 'ON_LEAVE'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.LocationType = exports.$Enums.LocationType = {
  HEADQUARTERS: 'HEADQUARTERS',
  OFFICE: 'OFFICE',
  WAREHOUSE: 'WAREHOUSE',
  STORE: 'STORE',
  FACTORY: 'FACTORY',
  REMOTE: 'REMOTE',
  OTHER: 'OTHER'
};

exports.IntegrationType = exports.$Enums.IntegrationType = {
  ECOMMERCE: 'ECOMMERCE',
  ACCOUNTING: 'ACCOUNTING',
  CRM: 'CRM',
  ERP: 'ERP',
  SHIPPING: 'SHIPPING',
  PAYMENT: 'PAYMENT',
  EMAIL: 'EMAIL',
  OTHER: 'OTHER'
};

exports.IntegrationStatus = exports.$Enums.IntegrationStatus = {
  CONNECTED: 'CONNECTED',
  DISCONNECTED: 'DISCONNECTED',
  ERROR: 'ERROR',
  SYNCING: 'SYNCING',
  PAUSED: 'PAUSED'
};

exports.AuditSeverity = exports.$Enums.AuditSeverity = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  CRITICAL: 'CRITICAL'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  ALERT: 'ALERT',
  REMINDER: 'REMINDER'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.Prisma.ModelName = {
  Company: 'Company',
  CompanyUser: 'CompanyUser',
  Department: 'Department',
  CompanyInvite: 'CompanyInvite',
  CompanyLocation: 'CompanyLocation',
  CompanyIntegration: 'CompanyIntegration',
  CompanyAuditLog: 'CompanyAuditLog',
  BillingHistory: 'BillingHistory',
  User: 'User',
  Role: 'Role',
  UserRole: 'UserRole',
  UserSession: 'UserSession',
  LoginHistory: 'LoginHistory',
  PasswordReset: 'PasswordReset',
  UserInvitation: 'UserInvitation',
  UserPreference: 'UserPreference',
  UserNotification: 'UserNotification',
  AuditLog: 'AuditLog',
  SystemSetting: 'SystemSetting',
  ApiKey: 'ApiKey'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
