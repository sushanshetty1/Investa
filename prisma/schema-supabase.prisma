generator supabaseClient {
  provider        = "prisma-client-js"
  output          = "./generated/supabase"
  previewFeatures = ["multiSchema"]
}

datasource supabaseDb {
  provider = "postgresql"
  url      = env("SUPABASE_DATABASE_URL")
}

model Company {
  id                    String               @id @default(uuid())
  name                  String
  displayName           String?
  description           String?
  website               String?
  industry              String?
  size                  CompanySize          @default(SMALL)
  email                 String?
  phone                 String?
  address               Json?
  registrationNumber    String?              @unique
  taxId                 String?              @unique
  vatNumber             String?
  businessType          BusinessType         @default(PRIVATE)
  logo                  String?
  primaryColor          String?
  theme                 Json?
  subscriptionPlan      SubscriptionPlan     @default(FREE)
  subscriptionStatus    SubscriptionStatus   @default(ACTIVE)
  billingEmail          String?
  paymentMethodId       String?
  maxUsers              Int                  @default(5)
  maxWarehouses         Int                  @default(1)
  maxProducts           Int                  @default(100)
  features              Json?
  enforceSSO            Boolean              @default(false)
  requireTwoFactor      Boolean              @default(false)
  passwordPolicy        Json?
  sessionTimeoutMinutes Int                  @default(480)
  isActive              Boolean              @default(true)
  isSuspended           Boolean              @default(false)
  isDeleted             Boolean              @default(false)
  trialEndsAt           DateTime?
  onboardingStep        String?
  setupComplete         Boolean              @default(false)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  createdBy             String
  billingHistory        BillingHistory[]
  auditLogs             CompanyAuditLog[]
  integrations          CompanyIntegration[]
  locations             CompanyLocation[]
  companyUsers          CompanyUser[]
  departments           Department[]

  @@map("companies")
}

model CompanyUser {
  id               String           @id @default(uuid())
  companyId        String
  userId           String
  role             CompanyRole      @default(EMPLOYEE)
  title            String?
  departmentId     String?
  employeeId       String?
  startDate        DateTime         @default(now())
  endDate          DateTime?
  permissions      Json?
  isActive         Boolean          @default(true)
  isOwner          Boolean          @default(false)
  canInvite        Boolean          @default(false)
  canManageBilling Boolean          @default(false)
  managerId        String?
  directReports    Json?
  status           EmploymentStatus @default(ACTIVE)
  invitedBy        String?
  invitedAt        DateTime?
  joinedAt         DateTime         @default(now())
  lastActiveAt     DateTime?
  company          Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department       Department?      @relation(fields: [departmentId], references: [id])
  manager          CompanyUser?     @relation("CompanyHierarchy", fields: [managerId], references: [id])
  reports          CompanyUser[]    @relation("CompanyHierarchy")
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([companyId, userId])
  @@map("company_users")
}

model Department {
  id               String        @id @default(uuid())
  companyId        String
  name             String
  description      String?
  code             String?
  parentId         String?
  level            Int           @default(0)
  headOfDepartment String?
  budget           Decimal?
  costCenter       String?
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  employees        CompanyUser[]
  company          Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parent           Department?   @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children         Department[]  @relation("DepartmentHierarchy")

  @@unique([companyId, name])
  @@map("departments")
}

model CompanyLocation {
  id            String       @id @default(uuid())
  companyId     String
  name          String
  type          LocationType @default(OFFICE)
  address       Json
  coordinates   Json?
  timezone      String       @default("UTC")
  phone         String?
  email         String?
  managerName   String?
  businessHours Json?
  isPrimary     Boolean      @default(false)
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  company       Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_locations")
}

model CompanyIntegration {
  id           String            @id @default(uuid())
  companyId    String
  name         String
  type         IntegrationType
  provider     String
  config       Json
  credentials  Json
  mappings     Json?
  autoSync     Boolean           @default(true)
  syncInterval Int               @default(60)
  lastSyncAt   DateTime?
  nextSyncAt   DateTime?
  status       IntegrationStatus @default(DISCONNECTED)
  isActive     Boolean           @default(true)
  lastError    String?
  errorCount   Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  company      Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
  @@map("company_integrations")
}

model CompanyAuditLog {
  id         String        @id @default(uuid())
  companyId  String
  userId     String?
  userEmail  String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  changes    Json?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  severity   AuditSeverity @default(INFO)
  timestamp  DateTime      @default(now())
  company    Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_audit_logs")
}

model BillingHistory {
  id            String        @id @default(uuid())
  companyId     String
  periodStart   DateTime
  periodEnd     DateTime
  amount        Decimal
  tax           Decimal       @default(0)
  total         Decimal
  currency      String        @default("USD")
  description   String?
  invoiceNumber String?       @unique
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  paidAt        DateTime?
  metadata      Json?
  createdAt     DateTime      @default(now())
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("billing_history")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  emailVerified    Boolean            @default(false)
  firstName        String?
  lastName         String?
  displayName      String?
  avatar           String?
  phone            String?
  password         String?
  twoFactorEnabled Boolean            @default(false)
  twoFactorSecret  String?
  timezone         String             @default("UTC")
  language         String             @default("en")
  theme            String             @default("system")
  isActive         Boolean            @default(true)
  isVerified       Boolean            @default(false)
  isSuspended      Boolean            @default(false)
  suspendedReason  String?
  lastLoginAt      DateTime?
  lastLoginIp      String?
  failedLoginCount Int                @default(0)
  lockedUntil      DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  apiKeys          ApiKey[]
  auditLogs        AuditLog[]
  companyUsers     CompanyUser[]
  loginHistory     LoginHistory[]
  passwordResets   PasswordReset[]
  invitations      UserInvitation[]   @relation("InvitedBy")
  receivedInvites  UserInvitation[]   @relation("InvitedUser")
  notifications    UserNotification[]
  preferences      UserPreference[]
  userRoles        UserRole[]
  sessions         UserSession[]

  @@map("users")
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  displayName String
  description String?
  color       String?
  permissions Json
  level       Int        @default(0)
  isSystem    Boolean    @default(false)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(uuid())
  userId     String
  roleId     String
  assignedBy String?
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserSession {
  id           String    @id @default(uuid())
  userId       String
  token        String    @unique
  refreshToken String?   @unique
  userAgent    String?
  ipAddress    String?
  deviceId     String?
  deviceType   String?
  browser      String?
  location     String?
  lastActivity DateTime  @default(now())
  expiresAt    DateTime
  isActive     Boolean   @default(true)
  isRevoked    Boolean   @default(false)
  revokedAt    DateTime?
  revokedBy    String?
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model LoginHistory {
  id          String   @id @default(uuid())
  userId      String
  successful  Boolean
  failReason  String?
  ipAddress   String
  userAgent   String?
  location    String?
  deviceType  String?
  attemptedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_history")
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model UserInvitation {
  id            String           @id @default(uuid())
  email         String
  roleId        String?
  token         String           @unique
  invitedById   String
  invitedByName String
  invitedUserId String?
  message       String?
  status        InvitationStatus @default(PENDING)
  expiresAt     DateTime
  sentAt        DateTime?
  acceptedAt    DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  invitedBy     User             @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedUser   User?            @relation("InvitedUser", fields: [invitedUserId], references: [id])

  @@map("user_invitations")
}

model UserPreference {
  id        String   @id @default(uuid())
  userId    String
  category  String
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, key])
  @@map("user_preferences")
}

model UserNotification {
  id          String               @id @default(uuid())
  userId      String
  title       String
  message     String
  type        NotificationType
  category    String?
  priority    NotificationPriority @default(MEDIUM)
  icon        String?
  color       String?
  actionUrl   String?
  actionText  String?
  isRead      Boolean              @default(false)
  readAt      DateTime?
  channels    Json?
  sentAt      DateTime?
  deliveredAt DateTime?
  metadata    Json?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notifications")
}

model AuditLog {
  id         String        @id @default(uuid())
  userId     String?
  userEmail  String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  changes    Json?
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  metadata   Json?
  severity   AuditSeverity @default(INFO)
  timestamp  DateTime      @default(now())
  user       User?         @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model SystemSetting {
  id          String   @id @default(uuid())
  category    String
  key         String
  value       Json
  description String?
  isPublic    Boolean  @default(false)
  isSystem    Boolean  @default(false)
  dataType    String?
  validation  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, key])
  @@map("system_settings")
}

model ApiKey {
  id         String    @id @default(uuid())
  userId     String?
  name       String
  keyHash    String    @unique
  keyPrefix  String    @unique
  scopes     Json
  lastUsedAt DateTime?
  usageCount Int       @default(0)
  rateLimit  Int?
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  isRevoked  Boolean   @default(false)
  revokedAt  DateTime?
  revokedBy  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum BusinessType {
  PRIVATE
  PUBLIC
  NONPROFIT
  GOVERNMENT
  PARTNERSHIP
  SOLE_PROPRIETORSHIP
}

enum SubscriptionPlan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  PAST_DUE
  CANCELLED
  SUSPENDED
  EXPIRED
}

enum CompanyRole {
  OWNER
  ADMIN
  MANAGER
  SUPERVISOR
  EMPLOYEE
  CONTRACTOR
  VIEWER
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  SUSPENDED
  ON_LEAVE
}

enum LocationType {
  HEADQUARTERS
  OFFICE
  WAREHOUSE
  STORE
  FACTORY
  REMOTE
  OTHER
}

enum IntegrationType {
  ECOMMERCE
  ACCOUNTING
  CRM
  ERP
  SHIPPING
  PAYMENT
  EMAIL
  OTHER
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  SYNCING
  PAUSED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  SENT
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ALERT
  REMINDER
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AuditSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}
